
For all code: consider when to pass by reference
            : add destructors, etc.

Consider using an enum for output or doing output with a separate class



Output objects

Currently, field class maintains outFiles list and manages output files/nodes. This should be done by a seperate class.

Monitor does not handle a single point well - add support for this

Solve the pause at the end of the program (problem caused by H5)


Follow Rule: 1 Class per CPP file, 1 header file per CPP file
    (also change .h for .hpp)


Eliminate unnecessary includes 
    a) May be possible to move them from .h into .cpp, and simply forward declare in .h
Replace using namespace std; with indivisual usings

Separte classes in:
    field1.h
    field2.h
    h5out.h (and maybe move this into its own library, along with matrix)

Data members need to be made private and/or protected
    When doing so, consider design choices in regards to get/set functions

Create time class to time different things

All position vectors will become eigen vectors:
    Vector2d for real space
    Vector2i for grid space
    -performance?

Class volume will contain two vecs
Class surface will contain two vecs:
    -checking to ensure one is the same
    -having a known orientation

Field Data and DFT data can become Boost::multi_arrays
    -how can we pass this to HDF5?
    -can we use a slice, and pass that to hdf5?
    -can slices be sent easily through MPI?
    -performance?
