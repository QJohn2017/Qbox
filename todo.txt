[ ] scattering and absoprtion tests with block (interpolated and non) and cylinder monitor
    [ ] shouldn't interpolation and non for block give identical results if setup correctly?

[ ] tfsf from a different surface side (use ivec in for loop)
[ ] all time-profiles need to have a known or computed fourier transform
    [ ] the flux from the tfsf per unit area should then by analyically determined

[ ] box_monitor needs to not write 4 surface_monitors (perhaps by not using has-a)
[ ] consider using source location to determine vmax
[ ] Try tab-completiono in qpost


[ ] vol's get_surface really should be outward normals
    but box_monitor needs positive normals?
    surface monitor should yield positive/negative flux according to normal vector
    consider also replacing monitors[4] with some sort of map direction->surface_monitor

[ ] For surface monitor... use a grid to half-grid conversion function in fields class to intepolate fields
    Figure out how the grid is staggered

[ ]  Definitely rethink the way sources are being done, with tfsf in mind

[ ] should IO be handled by its own class?

[ ] sources, monitors, objects... what to do when these fall out of main's scope?
    [ ] consider this: object has a pointer to field, which defaults to null.
        when object is added, pointer points to this
        when object destructor is called, have field copy the object first (this may cause problems if C++ has already deallocated some resources)
        these allocated objects will destruct when field falls out of scope

[ ] two monitor's with the same name -- seg fault 
    [ ] should monitors even have names? instead, name at write time?

[ ] For non-extendable monitor... writing multiple time gives seg fault

[ ] Do full TEM fields

[ ] set background material

################ OLD TODO ####################################################


For all code: consider when to pass by reference
            : add destructors, etc.

Monitor does not handle a single point well - add support for this

Follow Rule: 1 Class per CPP file, 1 header file per CPP file
    (also change .h for .hpp)

Eliminate unnecessary includes 
    a) May be possible to move them from .h into .cpp, and simply forward declare in .h
Replace using namespace std; with indivisual usings

Data members need to be made private and/or protected
    When doing so, consider design choices in regards to get/set functions

Bug in box_monitor... when extendable, surface monitor m1_1 is not extendable.
    A quick way to find solution: replace bool extendable with an enum class
